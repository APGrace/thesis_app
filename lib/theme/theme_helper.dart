import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:thesisapp/core/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
//throw exception to notify given theme is not found or not generated by the generatorif (!_supp
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData getThemeData() {
//throw exception to notify given theme is not found or not generated by the generator if (!_supportedCo
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.green500,
            width: 4,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(25),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.green700.withOpacity(0.31),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w300,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Imprima',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 11.fSize,
          fontFamily: 'Inria Sans',
          fontWeight: FontWeight.w300,
        ),
        headlineLarge: TextStyle(
          color: appTheme.gray80001,
          fontSize: 30.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w500,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 28.fSize,
          fontFamily: 'Josefin Sans',
          fontWeight: FontWeight.w300,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(0.85),
          fontSize: 12.fSize,
          fontFamily: 'KoHo',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.black900.withOpacity(0.6),
          fontSize: 10.fSize,
          fontFamily: 'KoHo',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 20.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Inconsolata',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XCE48BD1F),
    primaryContainer: Color(0XFF185004),
    secondaryContainer: Color(0XFFD9D9D9),

// Error colors
    errorContainer: Color(0XFFF34444),
    onError: Color(0XFF45C27A),

// On colors (text colors)
    onPrimary: Color(0XBF1B1A1A),
    onPrimaryContainer: Color(0X07FFFFFF),
    onSecondaryContainer: Color(0X7F1E1E1E),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
// Black
  Color get black900 => Color(0XFF000000);

// BlueGray
  Color get blueGray400 => Color(0XFF888888);

// Cyan
  Color get cyan900 => Color(0XFF0A535D);

// DeepOrange
  Color get deepOrange600 => Color(0XFFEA592B);

// Gray
  Color get gray20066 => Color(0X66F1F3F0);
  Color get gray400 => Color(0XFFBDD1BC);
  Color get gray800 => Color(0XFF494949);
  Color get gray80001 => Color(0XFF504E4E);

// Green
  Color get green500 => Color(0XFF5DC137);
  Color get green700 => Color(0XFF36A311);
  Color get greenA100 => Color(0XFFC4FAB2);

// GreenB
  Color get green800B2 => Color(0XB22F950C);

// GreenAF
  Color get greenA100F9 => Color(0XF9C5FAB2);

// LightGreen
  Color get lightGreen100 => Color(0XFFDAFFCF);
  Color get lightGreen10001 => Color(0XFFD6FCC9);
  Color get lightGreen50 => Color(0XFFEEFEE9);
  Color get lightGreen500 => Color(0XFF94D13B);
  Color get lightGreen5001 => Color(0XFFEFFFE9);
  Color get lightGreen600 => Color(0XFF66C942);
  Color get lightGreen60001 => Color(0XFF66C943);
  Color get lightGreen900 => Color(0XFF237308);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
